/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //思路正确，但代码很多重复的。
 参考下面的那个写法
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int flag = 0;
        ListNode cur = new ListNode(0);
        ListNode head = cur;
        while(l1 != null && l2 != null){
            int sum = l1.val + l2.val + flag;
            flag = 0;
            if(sum >= 10){
                sum -= 10;
                flag = 1;
            }
            ListNode node = new ListNode(sum);
            cur.next = node;
            cur = cur.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null){
            int sum = l1.val + flag;
            flag = 0;
            if(sum >=10){
                sum -= 10;
                flag = 1;
            }
            ListNode node = new ListNode(sum);
            cur.next = node;
            cur = cur.next;
            l1 = l1.next;
        }
        while(l2 != null){
            int sum = l2.val + flag;
            flag = 0;
            if(sum >=10){
                sum -= 10;
                flag = 1;
            }
            ListNode node = new ListNode(sum);
            cur.next = node;
            cur = cur.next;
            l2 = l2.next;
        }
        if(flag == 1){
            ListNode node = new ListNode(1);
            cur.next = node;
            cur = cur.next;
        }
        return head.next;
    }
}

/* 这是别人简介的代码，但是好像我的代码时间复杂度更小？
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) { //主要是循环里面的写法
            sum /= 10; //在这里加上进位
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);//省去判断进位
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
